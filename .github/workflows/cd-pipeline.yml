name: Production build / Deployment

on:
  push:
    branches:
      - deploy

env:
  NEXT_PUBLIC_APP_ENV: production
  NEXT_GITHUB_ID: ${{ secrets.NEXT_PROD_GITHUB_ID }}
  NEXT_GITHUB_SECRET: ${{ secrets.NEXT_PROD_GITHUB_SECRET }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare Corepack
        run: corepack prepare pnpm@10.0.0 --activate
      
      - name: Resolve Dependencies
        uses: ./.github/actions/pnpm-cache
        with:
          lock-file: "./pnpm-lock.yaml"
          modules-path: "./node_modules"
          pnpm-store-path: "./pnpm-store"
          install-path: "."

      - name: Set environment variables for build
        run: |
          echo "NEXT_PUBLIC_HOST=${{ secrets.NEXT_PUBLIC_HOST }}" >> .env.local
          echo "NEXT_PUBLIC_RC_HOST=${{ secrets.NEXT_PUBLIC_RC_HOST }}" >> .env.local
          echo "NEXT_PUBLIC_APP_ENV=production" >> .env.local
          echo "NEXT_GITHUB_ID=${{ secrets.NEXT_PROD_GITHUB_ID }}" >> .env.local
          echo "NEXT_GITHUB_SECRET=${{ secrets.NEXT_PROD_GITHUB_SECRET }}" >> .env.local
          echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .env.local
          echo "NEXT_PUBLIC_MIXPANEL_TOKEN=${{ secrets.NEXT_PUBLIC_MIXPANEL_TOKEN }}" >> .env.local

      - name: Build with Next.js
        run: pnpm build

      - name: Make zip file
        run: zip -r algohub.zip . -x "node_modules/*"
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: algohub
          path: algohub.zip
          overwrite: true
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: algohub
          path: algohub.zip

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Setting environment variables
        run: |
          echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
          echo "AWS_SG_NAME=algohub" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port ${{ secrets.AWS_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: File transfer with SCP
        uses: appleboy/scp-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_ADDR }}
          key: ${{ secrets.SSH_KEY }}
          source: algohub.zip
          target: /home/ubuntu/algohub-artifact

      - name: SSH Commands to deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_ADDR }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.AWS_SSH_PORT }}
          script_stop: true
          script: |
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            pm2 kill
            rm -rf algohub
            unzip ./algohub-artifact/algohub.zip/algohub.zip -d ./algohub
            cd algohub
            pnpm install --frozen-lockfile
            pm2 start pnpm --name algohub -- start

      - name: Remove Github Actions IP from Security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port ${{ secrets.AWS_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
        